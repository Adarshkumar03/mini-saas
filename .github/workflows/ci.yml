name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install and run backend linter
        run: |
          pip install ruff
          ruff check backend/app
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install and run frontend linter
        run: |
          cd frontend
          npm install
          npm run lint

  run-backend-tests:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r backend/requirements.txt
      - name: Run tests
        env:
          DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/testdb"
          SECRET_KEY: "a-ci-test-secret-key"
          ALGORITHM: "HS256"
          ACCESS_TOKEN_EXPIRE_MINUTES: "30"
        run: |
          cd backend
          PYTHONPATH=. pytest --cov=app

  run-e2e-tests:
    name: Run End-to-End Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: ./frontend
      - name: Build and Preview Frontend
        run: |
          cd frontend
          npm run build
          npm run preview &
      - name: Wait for Preview Server
        run: npx wait-on http://localhost:4173
      - name: Run Playwright Tests
        run: npx playwright test
        working-directory: ./frontend

  build-docker-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [run-backend-tests] # Depends only on backend tests
    if: github.ref == 'refs/heads/main' # Only run on push to main branch
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mini-saas-backend:latest
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mini-saas-frontend:latest
          build-args: |
            VITE_PUBLIC_API_BASE_URL=${{ vars.VITE_PUBLIC_API_BASE_URL }}